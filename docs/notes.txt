As of 2015/08/01, the initial noo-ebs system uses the broker / subscriber framework of MQTT (mosquitto).

The downside of this is it realies on a system that has "a single point of failure".  There are ways to circumvent this issue, although the best end goal is to move to a peer to peer message system, such as nanomsg.

Important stuff for co-ordination:

curl -s checkip.dyndns.org|sed -e 's/.*Current IP Address: //' -e 's/<.*$//'

dig +short myip.opendns.com @resolver1.opendns.com

ifconfig |grep -B1 "inet addr" |awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' |awk -F: '{ print $1 ": " $3 }'

and set time, if off:

date -s "2 OCT 2006 18:00:00"

Set date from the command line

date +%Y%m%d -s "20120418"

Set time from the command line

date +%T -s "11:14:00"

Set time and date from the command line

date -s "19 APR 2012 11:14:00"

Linux check date from command line

date

Will show you something like this:

Thu Apr 19 15:17:34 BOT 2012

Set hardware clock

The hardware clock is the clock that runs in you PC hardware even if you disconnect it from the main power supply. This is because it has a lithium battery in the modern computers and another type of battery in the old ones.

We'll see differences between hardware clock and system clock

hwclock --show

Will output something like this:

Thu 19 Apr 2012 03:23:05 PM BOT  -0.785086 seconds

Now check the system clock

date

Will output something like this:

Thu Apr 19 15:26:41 BOT 2012

Let's set the hardware clock to local time:

hwclock --set --date="2012-04-19 16:45:05" --localtime

If you want to set it to UTC time use:

hwclock --set --date="2011-04-19 20:45:05"  --utc

Set the timezone

To set the timezone of your system clock do the following:

cp /usr/share/zoneinfo/America/La_Paz /etc/localtime

Choose the right timezone for you.

Automatically adjust your computer clock

To have your system to automatically adjust time we need to install ntp. Get it from your repository. Once installed you can configure it this way:

Edit the file /etc/ntpd.conf. It will look like this:

# With the default settings below, ntpd will only synchronize your clock.
#
# For details, see:
# - the ntp.conf man page
# - http://support.ntp.org/bin/view/Support/GettingStarted
# - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon

# Associate to public NTP pool servers; see http://www.pool.ntp.org/
server 0.pool.ntp.org
server 1.pool.ntp.org
server 2.pool.ntp.org

# Only allow read-only access from localhost
restrict default noquery nopeer
restrict 127.0.0.1
restrict ::1

# Location of drift and log files
driftfile /var/lib/ntp/ntp.drift
logfile /var/log/ntp.log

# NOTE: If you run dhcpcd and have lines like 'restrict' and 'fudge' appearing
# here, be sure to add '-Y -N' to the dhcpcd_ethX variables in /etc/conf.d/net

Be sure to start the daemon, and to make it start automatically when the system boots.

On Arch Linux is: /etc/rc.d/ntpd start on Debian and derivatives /etc/init.d/ntpd start

Update from the command line against a time server

You can update the clock manually, without the need of the daemon with ntpdate

ntpdate 129.6.15.28

You will get something like this:

19 Apr 15:45:23 ntpdate[10948]: step time server 129.6.15.28 offset -45.697084 sec

the timeserver immediately above is not available, and ntp needs to be installed, so:

sudo apt-get /y install ntpdate

sudo service ntp stop

sudo ntpdate pool.ntp.org

and disable ntp daemon to prevent future errors.

~~~~~~

To prepare to compile nanomsg applications:

download nanomsg
extract and cd to nanomsg path
sh autogen.sh
./configure --enable-static
make
sudo make install

To compile, this worked:
gcc -pthread bus.c nanomsg/.libs/libnanomsg.a -o bus -lanl

Also, header paths need to be properly set in code

Apparenty libc.h is for OSX

replace with
#include <unistd.h>
#include <string.h>
#include <pthread.h>

Additional notes for future use

if word in mystring: 
   print 'success'

if 'seek' in 'those who seek shall find':
    print('Success!')

but keep in mind that this matches a sequence of characters, not necessarily a whole word - for example, 'word' in 'swordsmith' is True. If you only want to match whole words, you ought to use regular expressions:

import re

def findWholeWord(w):
    return re.compile(r'\b({0})\b'.format(w), flags=re.IGNORECASE).search

findWholeWord('seek')('those who seek shall find')    # -> <match object>
findWholeWord('word')('swordsmith')                   # -> None

~~~~~~~ current clpi.py ~~~~~~~~~~~~~~~~~

#!/usr/bin/env python

import paho.mqtt.client as mqtt
import time

# Unknown license, code found here:  http://stackoverflow.com/questions/31775450/publish-and-subscribe-with-paho-mqtt-client

# reference to MQTT python found here: http://mosquitto.org/documentation/python/

# requires:  sudo pip install paho-mqtt
# pip requires: sudo apt-get install python-pip

message = 'ON'
def on_connect(mosq, obj, rc):
#    mqttc.subscribe("aebl/hello", 0)
#    mqttc.subscribe("aebl/alive", 0)
#    mqttc.subscribe("uvea/alive", 0)
    mqttc.subscribe("uvea/world", 0)
    print("rc: " + str(rc))

def on_message(mosq, obj, msg):
    global message
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))
    message = msg.payload
#    mqttc.publish("uvea/world",msg.payload);
#    mqttc.publish("uvea/world","uvea/alive - ACK");
#    mqttc.publish("uvea/world",msg.payload);
    if 'ping' in message:
        mqttc.publish("uvea/world","pong");
#
#    mqttcb.publish("uvea/world",msg.payload);

def on_publish(mosq, obj, mid):
    print("mid: " + str(mid))

def on_subscribe(mosq, obj, mid, granted_qos):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

def on_log(mosq, obj, level, string):
    print(string)

mqttc = mqtt.Client()
# Assign event callbacks
mqttc.on_message = on_message
mqttc.on_connect = on_connect
mqttc.on_publish = on_publish
mqttc.on_subscribe = on_subscribe

# Connect
# mqttc.connect("localhost", 1883,60)

mqttc.connect("2001:5c0:1100:dd00:240:63ff:fefd:d3f1", 1883,60)
# mqttc.connect("2001:5c0:1100:dd00:ba27:ebff:fe2c:41d7", 1883,60)

# mosquitto_sub -h 2001:5c0:1100:dd00:ba27:ebff:fe2c:41d7 -t "hello/+" -t "aebl/+" -t "ihdn/+" -t "uvea/+"

# Continue the network loop
# mqttc.loop_forever()
mqttc.loop_start()
while True:
    mqttc.publish("uvea/world","sixxs alive")
    time.sleep(300) # sleep for 300 seconds before next call




mosquitto_pub -d -t uvea/world -m "ping" -h "2001:5c0:1100:dd00:240:63ff:fefd:d3f1"

~~~~~~~~~~

bash wget exchange rate
wget -O quote.txt "http://finance.yahoo.com/d/quotes.csv?e=.csv&f=sl1d1t1&s=BTCCAD=X"

~~~~~~~~~~~~~~~~~~~

curl upload to via server at studio:

curl -g -u ftp:none -T Videos/test.mkv ftp://[2001:5c0:1100:dd00:240:63ff:fefd:d3f1]/incoming/

~~~~~~~~~~~~~

watch files in directory: inotifywait
http://linux.die.net/man/1/inotifywait
http://techarena51.com/index.php/inotify-tools-example/

~~~~~~~~~~~~~

Popcorn Time bittorrent streaming client:
http://www.tecmint.com/watch-movies-online-using-popcorn-time/

~~~~~~~~~~~~~~~~~~~

Need to register client as unique host
Can use the AEBL channel auto assignement method

~~~~~~~~~~~~~~~~~

Method of getting exchange rate from yahoo finance

~~~~~~~~~~~~~~~~~~~

Investigating GNUnet for possible MQTT replacement and either use only or use along side nanomsg.

Very important reference to possible p2p MQTT via gnunet, does not show on quick google search and does not suggest MQTT directly:
sudo apt-get install gnunet

https://gnunet.org/
https://en.wikipedia.org/wiki/GNUnet

~~~~~~~~~~~~~~~~~~~~~~~~~

As possibly noted otherwise, noo-ebs would use IPv6 for routing as it is, by default, a public facing id in most situations.  Unfortunately, most north american tunnel brokers are no longer operating or are no longer allowing subscriptions.  Other tunnel brokers require a static IPv4 in order to create the tunnel.  In order to resolve this, openVPN can be used, with IPv6 only, in order to provide IPv6 capabilities to clients.

~~~~~~~~~~~~~~~~~~~~~

To upgrade broker installed on ubuntu 14.04, from:
http://mosquitto.org/download/


    sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa
    sudo apt-get update

